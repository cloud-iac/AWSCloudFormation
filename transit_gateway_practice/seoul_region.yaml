Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
# Seoul VPC
  Kr11VPC:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: Kr11VPC-VPC

  Kr11IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Kr11-IGW

  VPCIGWAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Kr11IGW
      VpcId: !Ref Kr11VPC

  SBNetPub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Kr11VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC-Pub-SN1

  SBNetPub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Kr11VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC-Pub-SN2

  SBNetPri3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Kr11VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: VPC-Pri-SN3

  SBNetPri4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Kr11VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: VPC-Pri-SN4

  RTablePub1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Kr11VPC
      Tags:
        - Key: Name
          Value: VPC-Pub-RT1

  AssSBNetRTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTablePub1
      SubnetId: !Ref SBNetPub1

  AssSBNetRTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTablePub1
      SubnetId: !Ref SBNetPub2

  RTablePub1Route:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAtt
    Properties:
      RouteTableId: !Ref RTablePub1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Kr11IGW

  RTablePri3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Kr11VPC
      Tags:
        - Key: Name
          Value: VPC-Pri-RT3

  AssSBNetRTable3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTablePri3
      SubnetId: !Ref SBNetPri3

  RTablePri3Route:
    Type: AWS::EC2::Route
    DependsOn: NATInstance1
    Properties:
      RouteTableId: !Ref RTablePri3
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance1

  RTablePri4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Kr11VPC
      Tags:
        - Key: Name
          Value: VPC-Pri-RT4

  AssSBNetRTable4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RTablePri4
      SubnetId: !Ref SBNetPri4

  RTablePri4Route:
    Type: AWS::EC2::Route
    DependsOn: NATInstance2
    Properties:
      RouteTableId: !Ref RTablePri4
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance2

  NATInstance1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Kr11VPC
      GroupDescription: NAT1-SG
      Tags:
      - Key : Name
        Value : NAT1-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: -1
        CidrIp: 10.1.3.0/24

  NATInstance2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Kr11VPC
      GroupDescription: NAT2-SG
      Tags:
      - Key : Name
        Value : NAT2-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.1.100/32
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: -1
        CidrIp: 10.1.4.0/24

  WEBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: WEB-SG
      Tags:
      - Key : Name
        Value : WEB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.1.100/32
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Kr11VPC
      GroupDescription: ALB-SG
      Tags:
      - Key : Name
        Value : ALB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  NATInstance1ENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref SBNetPub1
       Description: NAT-Instance1 eth0
       GroupSet:
       - !Ref NATInstance1SG
       PrivateIpAddress: 10.1.1.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: NAT-Instance1-ENI

  NATInstance1:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-084e92d3e117f7692
     InstanceType: t2.micro
     KeyName: !Ref KeyName
     Tags:
       - Key: Name
         Value: NAT-Instance1
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref NATInstance1ENI
         DeviceIndex: 0
     UserData:
       Fn::Base64: |
          #!/bin/bash
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  NATInstance2ENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref SBNetPub2
       Description: NAT-Instance2 eth0
       GroupSet:
       - !Ref NATInstance2SG
       PrivateIpAddress: 10.1.2.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: NAT-Instance2-ENI

  NATInstance2:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-084e92d3e117f7692
     InstanceType: t2.micro
     KeyName: !Ref KeyName
     Tags:
       - Key: Name
         Value: NAT-Instance2
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref NATInstance2ENI
         DeviceIndex: 0
     UserData:
       Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  WEBInstance3:
    Type: AWS::EC2::Instance
    DependsOn: RTablePri3Route
    Properties:
      ImageId: ami-084e92d3e117f7692
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: WEB-Instance3
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SBNetPri3
          GroupSet:
          - !Ref WEBSG
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum -y install httpd
          systemctl start httpd & systemctl enable httpd
          echo "<h1>TEST WEB Server 1</h1>" > /var/www/html/index.html

  WEBInstance4:
    Type: AWS::EC2::Instance
    DependsOn: RTablePri4Route
    Properties:
      ImageId: ami-084e92d3e117f7692
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: WEB-Instance4
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SBNetPri4
          GroupSet:
          - !Ref WEBSG
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum -y install httpd
          systemctl start httpd & systemctl enable httpd
          echo "<h1>TEST WEB Server 2</h1>" > /var/www/html/index.html

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: VPC-ALB
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref SBNetPub1
        - !Ref SBNetPub2

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: WEBInstance4
    Properties:
      Name: ALB-TG
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !Ref Kr11VPC
      Targets:
        - Id: !Ref WEBInstance3
          Port: 80
        - Id: !Ref WEBInstance4
          Port: 80
      Tags:
      - Key : Name
        Value : ALB-TG

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP