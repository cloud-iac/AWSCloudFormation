#서울 VPC 환경설정
Resources:
  #탄력적IP
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Nat1
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Nat2
  #VPC
  SeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: SeVPC
  #인터넷게이트웨이
  SeIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SeIGW
  #IGW연결
  SeIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SeVPC
      InternetGatewayId: !Ref SeIGW

  #서브넷 생성
  PubSubNet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: PubSubNet01
  PubSubNet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: PubSubNet01
  PriSubNet03:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: ap-northeast-2a
      Tags:
        - Key: Name
          Value: PriSubNet03
  PriSubNet04:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SeVPC
      CidrBlock: 10.1.4.0/24
      AvailabilityZone: ap-northeast-2c
      Tags:
        - Key: Name
          Value: PriSubNet04

  #퍼블릭 라우팅 테이블
  PubRT12:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC
      Tags:
        - Key: Name
          Value: PubRT12

  #프라이빗 라우팅 테이블
  PriRT3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC
      Tags:
        - Key: Name
          Value: PriRT3
  PriRT4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SeVPC
      Tags:
        - Key: Name
          Value: PriRT4

  #퍼블릭 라우팅 테이블에 서브넷 연결
  PubRouteTableAccSN1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubNet01
      RouteTableId: !Ref PubRT12

  PubRouteTableAccSN2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubNet02
      RouteTableId: !Ref PubRT12

  #프라이빗 라우팅 테이블에 서브넷 연결
  PriRouteTableAccSN3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSubNet03
      RouteTableId: !Ref PriRT3
  PriRouteTableAccSN4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSubNet04
      RouteTableId: !Ref PriRT4

  #퍼블릭 라우팅 테이블에 기본경로 설정 (인터넷 게이트웨이 연결)
  PubRoute12:
    Type: AWS::EC2::Route
    DependsOn: SeIGW
    Properties:
      RouteTableId: !Ref PubRT12
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SeIGW

  #프라이빗 라우팅 테이블에 NAT Instance 경로 설정
  PriRoute3:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PriRT3
      NetworkInterfaceId: !Ref NatENI01
  PriRoute4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PriRT4
      NetworkInterfaceId: !Ref NatENI02

  #보안그룹(Web공통)
  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH, ICMP, HTTP, HTTPS
      VpcId: !Ref SeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 433
          ToPort: 433
          CidrIp: 0.0.0.0/0

  #보안그룹(ALB-80,433)
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP, HTTPS
      VpcId: !Ref SeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 433
          ToPort: 433
          CidrIp: 0.0.0.0/0

  #인스턴스 생성(편의상 루트사용자로 로그인 허용)
  Nat1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      Tags:
        - Key: Name
          Value: Nat1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NatENI01
          DeviceIndex: "0"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum install -y iptables-services
          systemctl start iptables & systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  Nat2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      Tags:
        - Key: Name
          Value: Nat2
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NatENI02
          DeviceIndex: "0"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum install -y iptables-services
          systemctl start iptables & systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  Web3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      Tags:
        - Key: Name
          Value: Web3
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet:
            - !Ref WebSG
          SubnetId: !Ref PriSubNet03
          PrivateIpAddress: "10.1.3.100"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
  Web4:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-084e92d3e117f7692
      Tags:
        - Key: Name
          Value: Web4
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: "0"
          GroupSet:
            - !Ref WebSG
          SubnetId: !Ref PriSubNet04
          PrivateIpAddress: "10.1.4.100"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
      
  NatENI01:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PubSubNet01
      GroupSet:
        - !Ref WebSG
      PrivateIpAddress: "10.1.1.100"
      SourceDestCheck: false
  NatENI02:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PubSubNet02
      GroupSet:
        - !Ref WebSG
      PrivateIpAddress: "10.1.2.100"
      SourceDestCheck: false

  
